{"version":3,"sources":["context/PopupContext.js","context/InterfaceContext.js","components/Navbar.js","pages/ContactMe.js","components/Popup.js","components/PopupContainer.js","components/ProjectsSidebar.js","components/ProjectImage.js","pages/MyProjects.js","components/ImageCard.js","components/ProjectView.js","pages/ProjectPage.js","pages/ImageView.js","components/RenderCard.js","pages/MyRenders.js","pages/AboutPage.js","App.js","index.js"],"names":["PopupContext","React","createContext","PopupContextProvider","props","useState","popupList","setPopups","Provider","value","addPopup","text","type","prevState","newPopupIndex","length","index","console","error","removePopup","popupId","filter","popup","children","InterfaceContext","InterfaceContextProvider","currentLanguage","setCurrentLanguage","useEffect","cookies","Cookies","cookieLanguage","parseInt","get","log","set","path","setLanguage","language","translationEng","projects","renders","about","contact","english","russian","translationRus","Navbar","currentTranslation","interfaceContext","useContext","className","to","id","data-toggle","onClick","bind","undefined","submit","onSubmit","onNameEmpty","onContactsEmpty","onMessageEmpty","tooFast","contactsLabel","contactsInputPlaceholder","contactsSmall","nameLabel","nameInputPlaceholder","messageLabel","messageInputPlaceholder","ContactMe","popupContext","contactsInputField","nameInputField","messageInputField","fields","setFields","onChange","e","target","newFields","autoComplete","preventDefault","lastMessageTime","currentTime","Math","round","Date","getTime","axios","then","res","catch","reason","errorMessage","response","data","toString","htmlFor","placeholder","Popup","popupClasses","role","style","cursor","PopupContainer","errorList","map","key","position","bottom","projectString","myProjects","onFetchError","ProjectsSidebar","projectList","setProjectList","fetchProjects","a","flex","data-target","project","name","ProjectImage","projectId","background","url","MyProjects","projectImages","setProjectImages","setProjects","fetchImages","imageIds","titleImage","images","i","push","image","ImageCard","translation","title","description","titleRu","descriptionRu","width","backgroundImage","ProjectsView","translatedBody","setProject","setTitleImage","screenshots","setScreenshots","body","bodyRu","fetchProject","screenshotIds","dangerouslySetInnerHTML","__html","href","githubUrl","color","screenshot","ProjectPage","match","params","ImageView","setData","fetchImageData","src","alt","RenderCard","MyRenders","renderList","setRenderList","fetchRenders","render","AboutPage","setAbout","bodyEn","fetchAbout","App","exact","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4635d39c.chunk.js","sourcesContent":["import React, { useState} from 'react'\n\nexport const ERROR_POPUP = 0;\nexport const INFO_POPUP = 1;\nexport const PopupContext = React.createContext([]);\n\nexport const PopupContextProvider = props => {\n    const [popupList, setPopups] = useState([]);\n    const addPopup = (text, type) => {\n        if (type === ERROR_POPUP || type === INFO_POPUP) {\n            setPopups((prevState) => {\n                const newPopupIndex = prevState.length === 0  ? 0 : prevState[prevState.length-1].index + 1;\n                return [...prevState, {text: text, type: type, index: newPopupIndex}];\n            });\n        } else {\n            console.error(\"Invalid popup type: \" + type + \". Should be ERROR_POPUP or INFO_POPUP.\")\n        }\n    };\n\n    const removePopup = (popupId) => {\n        setPopups(popupList.filter((popup) => (popup.index !== popupId)))\n    };\n\n    return (\n        <PopupContext.Provider value={{popupList: popupList, addPopup: addPopup, removePopup: removePopup}}>\n            {props.children}\n        </PopupContext.Provider>\n    );\n};\n\n// export const PopupConsumer = PopupContext.Consumer;","import Cookies from \"universal-cookie\";\nimport React, { useState, useEffect } from 'react';\n\nexport const LANGUAGE_EN = 0;\nexport const LANGUAGE_RU = 1;\nexport const InterfaceContext = React.createContext([]);\n\nexport const InterfaceContextProvider = props => {\n    const [currentLanguage, setCurrentLanguage] = useState(LANGUAGE_EN);\n    useEffect(() => {\n        let cookies = new Cookies();\n        let cookieLanguage = parseInt(cookies.get(\"language\"));\n        // If language was not set or is incorrect.\n        if (cookieLanguage !== LANGUAGE_EN && cookieLanguage !== LANGUAGE_RU) {\n            console.log(\"Cookie language is not LANGUAGE_EN or LANGUAGE_RU. Setting it to LANGUAGE_EN\");\n            cookies.set(\"language\", LANGUAGE_EN, { path: '/' });\n            return;\n        }\n        setCurrentLanguage(cookieLanguage);\n    }, []);\n    const setLanguage = (language) => {\n        if (language !== LANGUAGE_EN && language !== LANGUAGE_RU) {\n            console.error(language + \" is not a valid language. LANGUAGE_EN and LANGUAGE_RU are valid.\");\n            return;\n        }\n        let cookies = new Cookies();\n        cookies.set(\"language\", language, { path: '/' });\n        setCurrentLanguage(language);\n    };\n\n    return (\n        <InterfaceContext.Provider value={{setLanguage: setLanguage, currentLanguage: currentLanguage}}>\n            {props.children}\n        </InterfaceContext.Provider>\n    );\n};\n\n// export const PopupConsumer = PopupContext.Consumer;","import React, { useContext } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from \"../context/InterfaceContext\";\nimport { Link } from \"react-router-dom\";\n\nconst translationEng = {\n    projects: \"My projects\",\n    renders: \"My renders\",\n    about: \"About me\",\n    contact: \"Contact me\",\n    language: \"Language\",\n    english: \"English\",\n    russian: \"Russian\",\n};\n\nconst translationRus = {\n    projects: \"Мои проекты\",\n    renders: \"Мои рендеры\",\n    about: \"Обо мне\",\n    contact: \"Обратная связь\",\n    language: \"Язык\",\n    english: \"Английский\",\n    russian: \"Русский\",\n};\n\nconst Navbar = (props) => {\n    const interfaceContext = useContext(InterfaceContext);\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN)\n        currentTranslation = translationEng;\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU)\n        currentTranslation = translationRus;\n    const setLanguage = (language) => {\n        interfaceContext.setLanguage(language);\n    };\n\n    return (\n        <nav className=\"navbar navbar-bg-purple sticky-top justify-content-center justify-content-sm-between\">\n            <Link to=\"/\" className=\"navbar-brand navbar-text-active\">Kepler-Br</Link>\n\n            <div className=\" navbar-nav-scroll\">\n                <ul className=\"navbar-nav flex-row\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/projects\" className=\"nav-item nav-link mr-3 navbar-text-inactive\">{currentTranslation.projects}</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/renders\" className=\"nav-item nav-link mr-3 navbar-text-inactive\">{currentTranslation.renders}</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/about\" className=\"nav-item nav-link mr-3 navbar-text-inactive\">{currentTranslation.about}</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/contact_me\" className=\"nav-item nav-link mr-3 navbar-text-inactive\">{currentTranslation.contact}</Link>\n                    </li>\n                </ul>\n            </div>\n\n            <div className=\"nav-item dropdown\">\n                <span className=\"nav-item nav-link dropdown-toggle mr-md-2 navbar-text-inactive\" id=\"bd-versions\"\n                    data-toggle=\"dropdown\">\n                {currentTranslation.language}\n                </span>\n                <div className=\"dropdown-menu dropdown-menu-right\">\n                    <span className=\"dropdown-item\" onClick={setLanguage.bind(undefined, LANGUAGE_EN)}>{currentTranslation.english}</span>\n                    <span className=\"dropdown-item\" onClick={setLanguage.bind(undefined, LANGUAGE_RU)}>{currentTranslation.russian}</span>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React, { useContext, useState } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from '../context/InterfaceContext';\nimport { ERROR_POPUP, INFO_POPUP, PopupContext } from '../context/PopupContext';\nimport axios from 'axios';\nimport Cookies from \"universal-cookie\";\n\nconst translationEng = {\n    submit: \"Submit\",\n    onSubmit: \"Your message has been submitted.\",\n    onNameEmpty: \"Name field is required.\",\n    onContactsEmpty: \"Contacts field is required.\",\n    onMessageEmpty: \"Message field is required.\",\n    tooFast: \"You're too fast! Try in a day.\",\n\n    contactsLabel: \"Your contacts*\",\n    contactsInputPlaceholder: \"Contacts\",\n    contactsSmall: \"I'll never share your contacts.\",\n\n    nameLabel: \"Your name*\",\n    nameInputPlaceholder: \"Name\",\n\n    messageLabel: \"Your message*\",\n    messageInputPlaceholder: \"What do you want to tell me?\",\n};\n\nconst translationRus = {\n    submit: \"Отправить\",\n    onSubmit: \"Ваше сообщение было отправлено.\",\n    onNameEmpty: \"Поле Имя не должно быть пустым.\",\n    onContactsEmpty: \"Поле Контакты не должно быть пустым.\",\n    onMessageEmpty: \"Поле Сообщение не должно быть пустым.\",\n    tooFast: \"Слишком быстро! Попробуйте через день.\",\n\n    contactsLabel: \"Ваши контакты*\",\n    contactsInputPlaceholder: \"Контакты\",\n    contactsSmall: \"Я не буду разглашать ваши контакты.\",\n\n    nameLabel: \"Ваше имя*\",\n    nameInputPlaceholder: \"Имя\",\n\n    messageLabel: \"Ваше сообщение*\",\n    messageInputPlaceholder: \"Что вы хотите сказать мне?\",\n};\n\nconst ContactMe = (props) => {\n    const MAX_MESSAGE_LEN = 500;\n    const MAX_CONTACT_LEN = 100;\n    const MAX_NAME_LEN = 100;\n    const interfaceContext = useContext(InterfaceContext);\n    const popupContext = useContext(PopupContext);\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN)\n        currentTranslation = translationEng;\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU)\n        currentTranslation = translationRus;\n    const [fields, setFields] = useState({contactsInputField: \"\",\n                                                    nameInputField: \"\",\n                                                    messageInputField: \"\"});\n\n    const onChange = (e) => {\n        if (e.target.id === \"messageInputField\" && e.target.value.length > MAX_MESSAGE_LEN)\n            return;\n        if (e.target.id === \"nameInputField\" && e.target.value.length > MAX_NAME_LEN)\n            return;\n        if (e.target.id === \"contactsInputField\" && e.target.value.length > MAX_CONTACT_LEN)\n            return;\n        const newFields = {...fields, [e.target.id]: e.target.value};\n        setFields(newFields);\n    };\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        const PERIOD_BETWEEN_MESSAGES = 60*60*24;\n        let cookies = new Cookies();\n        let lastMessageTime = cookies.get(\"last_message\");\n        if (typeof parseInt(lastMessageTime) !== \"number\") {\n            cookies.set(\"last_message\", 0, { path: '/' });\n            lastMessageTime = 0;\n        }\n        const currentTime = Math.round((new Date()).getTime()/1000);\n        if ((currentTime - lastMessageTime) < PERIOD_BETWEEN_MESSAGES) {\n            popupContext.addPopup(currentTranslation.tooFast, ERROR_POPUP);\n            return;\n        }\n        if (fields.contactsInputField.length === 0) {\n            popupContext.addPopup(currentTranslation.onContactsEmpty, ERROR_POPUP);\n            return;\n        }\n        if (fields.nameInputField.length === 0) {\n            popupContext.addPopup(currentTranslation.onNameEmpty, ERROR_POPUP);\n            return;\n        }\n        if (fields.messageInputField.length === 0) {\n            popupContext.addPopup(currentTranslation.onMessageEmpty, ERROR_POPUP);\n            return;\n        }\n        axios.get(`/api/message.send?contacts=${fields.contactsInputField}&name=${fields.nameInputField}&message=${fields.messageInputField}`)\n            .then((res) => {\n                popupContext.addPopup(currentTranslation.onSubmit, INFO_POPUP);\n                cookies.set(\"last_message\", currentTime, { path: '/' });\n            })\n            .catch((reason) => {\n                let errorMessage = \"Denied: \";\n                try {\n                    errorMessage += reason.response.data.error;\n                } catch (e) {\n                    errorMessage += reason.toString();\n                }\n                popupContext.addPopup(errorMessage, ERROR_POPUP);\n            });\n    };\n\n    return (\n        <div className=\"row justify-content-center\">\n            <form className=\"mb-2 mt-2 col-8\" autoComplete=\"off\" onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"contactsInputField\">{currentTranslation.contactsLabel}</label>\n                    <input value={fields.contactsInputField} onChange={onChange} type=\"text\" className=\"form-control\" id=\"contactsInputField\" placeholder={currentTranslation.contactsInputPlaceholder} />\n                    <small className=\"form-text text-muted\">{currentTranslation.contactsSmall}</small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"nameInputField\">{currentTranslation.nameLabel}</label>\n                    <input value={fields.nameInputField} onChange={onChange} type=\"text\" className=\"form-control\" id=\"nameInputField\" placeholder={currentTranslation.nameInputPlaceholder} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"messageInputField\">{currentTranslation.messageLabel}</label>\n                    <textarea value={fields.messageInputField} onChange={onChange} type=\"textarea\" className=\"form-control\" id=\"messageInputField\"\n                              placeholder={currentTranslation.messageInputPlaceholder} />\n                    <small className=\"form-text text-muted\">{fields.messageInputField.length + \"/\" + MAX_MESSAGE_LEN}</small>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">{currentTranslation.submit}</button>\n            </form>\n        </div>\n    );\n};\n\nexport default ContactMe;","import React, {useContext} from 'react'\nimport { PopupContext } from \"../context/PopupContext\";\nimport { ERROR_POPUP, INFO_POPUP } from \"../context/PopupContext\";\n\nconst Popup = (props) => {\n    const popupContext = useContext(PopupContext);\n    const onClose = () => (popupContext.removePopup(props.popupId));\n\n    let popupClasses = \"alert\";\n    if (props.type === ERROR_POPUP) {\n        popupClasses += \" alert-danger\"\n    } else if (props.type === INFO_POPUP) {\n        popupClasses += \" alert-info\"\n    }\n    return(\n        <div className={popupClasses} role=\"alert\">\n          <span>{props.text}</span>\n          <button style={{cursor: \"pointer\"}} className=\"close\" onClick={onClose}>&times;</button>\n        </div>\n    );\n};\n\nexport default Popup;\n","import React, { useContext } from 'react'\nimport Popup from './Popup'\nimport { PopupContext } from \"../context/PopupContext\";\n\nconst PopupContainer = (props) => {\n    const popupContext = useContext(PopupContext);\n    const errorList = popupContext.popupList.map(\n        (popup) => <Popup text={popup.text} key={popup.index} popupId={popup.index} type={popup.type}/>\n    );\n    return (\n        <div className=\"container-fluid\" style={{position: \"fixed\", bottom: \"0px\"}}>\n          { errorList }\n        </div>\n    );\n};\n\nexport default PopupContainer;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from \"../context/InterfaceContext\";\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport {ERROR_POPUP, PopupContext} from \"../context/PopupContext\";\n\nconst translationEng = {\n    projectString: \"Project\",\n    myProjects: \"My projects\",\n    onFetchError: \"Error fetching project list data. Try later.\"\n};\n\nconst translationRus = {\n    projectString: \"Проект\",\n    myProjects: \"Мои проекты\",\n    onFetchError: \"Ошибка при получении листа проектов. Попробуйте позже.\"\n};\n\nconst ProjectsSidebar = (props) => {\n    const popupContext = useContext(PopupContext);\n    const interfaceContext = useContext(InterfaceContext);\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN)\n        currentTranslation = translationEng;\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU)\n        currentTranslation = translationRus;\n\n    const [projectList, setProjectList] = useState([]);\n    const fetchProjects = async () => {\n        let response;\n        try {\n            response = await axios.get(\"/api/project.get_all\");\n        } catch (e) {\n            popupContext.addPopup(currentTranslation.onFetchError, ERROR_POPUP);\n            return;\n        }\n        setProjectList(response.data);\n    };\n\n    useEffect(() => {\n        fetchProjects();\n    }, []);\n\n    return (\n        <div className=\"col-md-3 col-xl-2 sidebar\">\n            <div className=\"container-fluid mt-2 d-flex\">\n                <span className=\"h5 md-text-center\" style={{flex: \"1\"}}>{currentTranslation.myProjects}</span>\n                <button className=\"navbar-toggler d-md-none\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#sidebarBlock\">\n                    <i className=\"fas fa-bars\"></i>\n                </button>\n            </div>\n            <nav className=\"collapse show sidebar-links\" id=\"sidebarBlock\">\n                <hr className=\"m-1\"/>\n                {\n                    projectList.map((project) => {\n                        return <Link to={\"/project/\" + project.id} key={project.id}>{project.name}</Link>;\n                    })\n                }\n            </nav>\n        </div>\n    );\n};\n\nexport default ProjectsSidebar;","import { Link } from \"react-router-dom\";\nimport React from 'react';\n\nconst ProjectImage = (props) => {\n    return (\n        <Link to={\"project/\" + props.projectId}>\n            <div style={{background: `url(${props.data.url}) center center / cover no-repeat`}}\n                     className=\"container-fluid project-preview-image\"></div>\n        </Link>\n    );\n};\n\nexport default ProjectImage;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ProjectsSidebar from \"../components/ProjectsSidebar\";\nimport ProjectImage from \"../components/ProjectImage\";\n\nconst MyProjects = (props) => {\n    const [projectImages, setProjectImages] = useState([]);\n    const [projects, setProjects] = useState([]);\n\n    const fetchImages = async () => {\n        let response;\n        try {\n            response = await axios.get(\"/api/project.get_all\");\n            setProjects(response.data);\n        } catch (e) {\n            return;\n        }\n        const  imageIds = response.data.map((project) => (project.titleImage));\n        let images = [];\n        for (let i = 0; i < imageIds.length; i++) {\n            try {\n                response = await axios.get(`/api/image.get?id=${imageIds[i]}`);\n                images.push(response.data);\n            } catch (e) {\n                console.error(\"Image not loaded. Cannot get response from server.\");\n            }\n        }\n        setProjectImages(images);\n    };\n\n    useEffect(() => {fetchImages();}, []);\n    return (\n        <div className=\"row\">\n            <ProjectsSidebar />\n            <div className=\"col-md-9 col-xl-10 mt-2\">\n                {projectImages.map(((image, index) => (\n                    <ProjectImage data={image} key={image.id} projectId={projects[index].id} />\n                )))}\n            </div>\n        </div>\n    );\n};\n\nexport default MyProjects;","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {InterfaceContext, LANGUAGE_EN, LANGUAGE_RU} from \"../context/InterfaceContext\";\n\nconst ImageCard = (props) => {\n    const interfaceContext = useContext(InterfaceContext);\n    let translation = {};\n    if (interfaceContext.currentLanguage === LANGUAGE_EN) {\n        translation = {\n            title: props.data.title,\n            description: props.data.description\n        };\n    }\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU) {\n        translation = {\n            title: props.data.titleRu,\n            description: props.data.descriptionRu\n        };\n    }\n    return (\n        <div className=\"mb-2\">\n            <div className=\"card\" style={{width: \"18rem\"}}>\n                <Link to={\"/image/\" + props.data.id}>\n                <div style={{backgroundImage: `url(${props.data.url})`}}\n                     className=\"container-fluid preview-image\" />\n                </Link>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{translation.title}</h5>\n                    <p className=\"card-text\">{translation.description}</p>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default ImageCard;","import React, { useContext, useState, useEffect } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from \"../context/InterfaceContext\";\n\nimport axios from 'axios';\nimport {ERROR_POPUP, PopupContext} from \"../context/PopupContext\";\nimport ImageCard from \"./ImageCard\";\n\nconst translationEng = {\n    projectString: \"Project\",\n    onFetchError: \"Cannot fetch project data. Try again later.\",\n};\n\nconst translationRus = {\n    projectString: \"Проект\",\n    onFetchError: \"Не могу получить данные проекта. Попробуйте позже.\",\n};\n\nconst ProjectsView = (props) => {\n    const popupContext = useContext(PopupContext);\n    const interfaceContext = useContext(InterfaceContext);\n    const [project, setProject] = useState([]);\n    const [titleImage, setTitleImage] = useState({});\n    const [screenshots, setScreenshots] = useState([]);\n    let translatedBody;\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN) {\n        currentTranslation = translationEng;\n        translatedBody = project.body;\n    }\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU) {\n        currentTranslation = translationRus;\n        translatedBody = project.bodyRu;\n    }\n\n    const fetchProject = async () => {\n        let response;\n        try {\n            response = await axios.get(`/api/project.get?id=${props.projectId}`);\n        } catch (e) {\n            popupContext.addPopup(currentTranslation.onFetchError, ERROR_POPUP);\n            return;\n        }\n        const screenshotIds = response.data.images;\n        setProject(response.data);\n        try {\n            response = await axios.get(`/api/image.get?id=${response.data.titleImage}`);\n            setTitleImage(response.data);\n        } catch (e) {\n            console.error(\"Image not loaded. Cannot get response from server.\")\n        }\n        let screenshots = [];\n        for (let i = 0; i < screenshotIds.length; i++) {\n            try {\n                response = await axios.get(`/api/image.get?id=${screenshotIds[i]}`);\n                screenshots.push(response.data);\n            } catch (e) {\n                console.error(\"Image not loaded. Cannot get response from server.\");\n            }\n        }\n        setScreenshots(screenshots);\n    };\n\n    useEffect(() => {\n        fetchProject();\n    }, [props.projectId]);\n    // console.log(titleImage);\n    return (\n        <div className=\"col-md-9 col-xl-10 mt-2\">\n            <div style={{background: `url(${titleImage.url}) center center / cover no-repeat fixed`}}\n                 className=\"container-fluid project-preview-image\"></div>\n            <h1>{currentTranslation.projectString + \" \" + project.name }</h1>\n            <span dangerouslySetInnerHTML={{__html: translatedBody}}/>\n\n            <br />\n            <a href={project.githubUrl}><i style={{color: \"#3f3f3f\"}} className=\"fab fa-github\"></i> Github</a>\n            <hr/>\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    {screenshots.map((screenshot) => {return <ImageCard key={screenshot.id} data={screenshot}/>;})}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProjectsView;","import React from 'react';\nimport ProjectsSidebar from \"../components/ProjectsSidebar\";\nimport ProjectsView from \"../components/ProjectView\";\n\nconst ProjectPage = (props) => {\n\n    return (\n        <div className=\"row\">\n            <ProjectsSidebar />\n            <ProjectsView projectId={props.match.params.id}/>\n        </div>\n    );\n};\n\nexport default ProjectPage;","import React, { useContext, useState, useEffect } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from '../context/InterfaceContext';\nimport { ERROR_POPUP, PopupContext } from '../context/PopupContext';\nimport axios from 'axios';\n\nconst translationEng = {\n    onFetchError: \"Cannot fetch image data. Try again later.\",\n};\n\nconst translationRus = {\n    onFetchError: \"Не могу получить данные изображения. Попробуйте позже.\",\n};\n\nconst ImageView = (props) => {\n    const interfaceContext = useContext(InterfaceContext);\n    const popupContext = useContext(PopupContext);\n    const [data, setData] = useState({});\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN){\n        currentTranslation = translationEng;\n        currentTranslation.title = data.title;\n        currentTranslation.description = data.description;\n    }\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU){\n        currentTranslation = translationRus;\n        currentTranslation.title = data.titleRu;\n        currentTranslation.description = data.descriptionRu;\n    }\n    const fetchImageData = async () => {\n        let response;\n        try {\n            response = await axios.get(`/api/image.get?id=${props.match.params.id}`);\n            setData(response.data);\n        } catch (e) {\n            popupContext.addPopup(currentTranslation.onFetchError, ERROR_POPUP);\n            return;\n        }\n    };\n\n    useEffect(() => {fetchImageData();}, []);\n    return (\n        <div className=\"row text-center\">\n            <div className=\"col mb-2  justify-content-center\">\n                <img src={data.url} alt=\"Oh noes\" className=\"img-fluid\" />\n                    <h5 className=\"d-block mt-2\">{currentTranslation.title}</h5>\n                    <span className=\"d-block\">{currentTranslation.description}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ImageView;","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {InterfaceContext, LANGUAGE_EN, LANGUAGE_RU} from \"../context/InterfaceContext\";\n\nconst RenderCard = (props) => {\n    const interfaceContext = useContext(InterfaceContext);\n    let translation = {};\n    if (interfaceContext.currentLanguage === LANGUAGE_EN) {\n        translation = {\n            title: props.data.title,\n            description: props.data.description\n        };\n    }\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU) {\n        translation = {\n            title: props.data.titleRu,\n            description: props.data.descriptionRu\n        };\n    }\n    return (\n        <div className=\"m-2\">\n            <div className=\"card\" style={{width: \"18rem\"}}>\n                <Link to={\"/image/\" + props.data.id}>\n                <div style={{backgroundImage: `url(${props.data.url})`}}\n                     className=\"container-fluid preview-image\" >\n                </div>\n                </Link>\n                <div className=\"card-header\">\n                    <h5 className=\"card-title mb-0\">{translation.title}</h5>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default RenderCard;","import React, { useContext, useState, useEffect } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from '../context/InterfaceContext';\nimport axios from 'axios';\nimport {ERROR_POPUP, PopupContext} from \"../context/PopupContext\";\nimport RenderCard from \"../components/RenderCard\";\n\nconst translationEng = {\n    onFetchError: \"Cannot fetch render images. Try again later.\",\n};\n\nconst translationRus = {\n    onFetchError: \"Не могу получить рендеры. Попробуйте позже.\",\n};\n\nconst MyRenders = (props) => {\n    const interfaceContext = useContext(InterfaceContext);\n    const popupContext = useContext(PopupContext);\n    const [renderList, setRenderList] = useState([]);\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN)\n        currentTranslation = translationEng;\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU)\n        currentTranslation = translationRus;\n\n    const fetchRenders = async () => {\n        let response;\n        try {\n            response = await axios.get(\"/api/render.get_all\");\n            setRenderList(response.data);\n        } catch (e) {\n            popupContext.addPopup(currentTranslation.onFetchError, ERROR_POPUP);\n        }\n    };\n\n    useEffect(() => {fetchRenders();}, []);\n    return (\n        <div className=\"row justify-content-center\">\n            {/*<div className=\"col-12 mt-2\">*/}\n                {renderList.map((render) => {\n                    return <RenderCard data={render.image} key={render.id} />\n                })}\n                {/*{projectImages.map(((image, index) => (*/}\n                {/*    <ProjectImage data={image} key={image.id} projectId={projects[index].id} />*/}\n                {/*)))}*/}\n            {/*</div>*/}\n        </div>\n    );\n};\n\nexport default MyRenders;","import React, { useContext, useState, useEffect } from 'react';\nimport { LANGUAGE_RU, LANGUAGE_EN, InterfaceContext } from '../context/InterfaceContext';\nimport axios from 'axios';\nimport {ERROR_POPUP, PopupContext} from \"../context/PopupContext\";\n\nconst translationEng = {\n    onFetchError: \"Cannot get about page. Try again later.\",\n};\n\nconst translationRus = {\n    onFetchError: \"Не могу загрузить страницу с сервера. Попробуйте позже.\",\n};\n\nconst AboutPage = (props) => {\n    const [about, setAbout] = useState([]);\n    const popupContext = useContext(PopupContext);\n    const interfaceContext = useContext(InterfaceContext);\n    let translatedBody;\n    let currentTranslation;\n    if (interfaceContext.currentLanguage === LANGUAGE_EN) {\n        currentTranslation = translationEng;\n        translatedBody = about.bodyEn;\n    }\n    else if (interfaceContext.currentLanguage === LANGUAGE_RU) {\n        currentTranslation = translationRus;\n        translatedBody = about.bodyRu;\n    }\n\n    const fetchAbout = async () => {\n        let response;\n        try {\n            response = await axios.get(\"/api/about.get\");\n            setAbout(response.data);\n        } catch (e) {\n            popupContext.addPopup(currentTranslation.onFetchError, ERROR_POPUP);\n        }\n    };\n\n    useEffect(() => {fetchAbout();}, []);\n    return (\n        <div className=\"row\">\n            <div className=\"col mt-2\">\n                {<span dangerouslySetInnerHTML={{__html: translatedBody}}/>}\n            </div>\n        </div>\n    );\n};\n\nexport default AboutPage;","import React from 'react';\nimport { PopupContextProvider } from \"./context/PopupContext\";\nimport { InterfaceContextProvider } from \"./context/InterfaceContext\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from \"./components/Navbar\";\nimport ContactMe from \"./pages/ContactMe\"\nimport PopupContainer from \"./components/PopupContainer\";\nimport MyProjects from \"./pages/MyProjects\";\nimport ProjectPage from \"./pages/ProjectPage\";\nimport \"./App.css\";\nimport ImageView from \"./pages/ImageView\";\nimport MyRenders from \"./pages/MyRenders\";\nimport AboutPage from \"./pages/AboutPage\";\n\nfunction App() {\n    console.log(\"Oh, hi there!\");\n    return (\n        <div className=\"App\">\n          <InterfaceContextProvider>\n            <PopupContextProvider>\n              <BrowserRouter>\n                <Navbar/>\n                <div className=\"container-fluid mt-2\">\n                  <Switch>\n                    <Route exact path=\"/contact_me\" component={ContactMe} />\n                    <Route exact path=\"/projects\" component={MyProjects} />\n                    <Route exact path=\"/renders\" component={MyRenders} />\n                    <Route exact path=\"/about\" component={AboutPage} />\n                    <Route exact path=\"/\" component={AboutPage} />\n                    <Route exact path=\"/project/:id\" component={ProjectPage} />\n                    <Route exact path=\"/image/:id\" component={ImageView} />\n                  </Switch>\n                </div>\n                <PopupContainer/>\n              </BrowserRouter>\n            </PopupContextProvider>\n          </InterfaceContextProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}